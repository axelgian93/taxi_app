services:
  db:
    image: postgis/postgis:16-3.4
    container_name: taxi_db
    environment:
      POSTGRES_USER: taxi
      POSTGRES_PASSWORD: taxi123
      POSTGRES_DB: taxi_app
    ports:
      - "55432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taxi -d taxi_app -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7-alpine
    container_name: taxi_redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  # ---------- PERFIL PRODUCCIÃ“N ----------
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taxi_api
    env_file:
      - ./backend/.env.docker
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["prod"]

  # ---------- PERFIL DESARROLLO (hot-reload) ----------
  api-dev:
    image: node:22-alpine
    container_name: taxi_api_dev
    working_dir: /app
    env_file:
      - ./backend/.env.dev.docker
    environment:
      CHOKIDAR_USEPOLLING: "1"
    command: >
      sh -c "
      npm ci &&
      npx prisma generate &&
      npx prisma migrate deploy &&
      npx ts-node-dev --respawn --transpile-only src/index.ts
      "
    volumes:
      - ./backend:/app
      - node_deps:/app/node_modules
    ports:
      - "8081:8080"   # ðŸ‘ˆ dev expone 8081 en el host
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["dev"]

volumes:
  db_data:
  redis_data:
  node_deps:
